// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/git/git.go

// Package mock_git is a generated GoMock package.
// SPDX-FileCopyrightText: 2020 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
package mock_git

import (
	context "context"
	reflect "reflect"

	git "github.com/gardener/docforge/pkg/git"
	v5 "github.com/go-git/go-git/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockGit is a mock of Git interface.
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit.
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance.
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// PlainCloneContext mocks base method.
func (m *MockGit) PlainCloneContext(ctx context.Context, path string, isBare bool, o *v5.CloneOptions) (git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlainCloneContext", ctx, path, isBare, o)
	ret0, _ := ret[0].(git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlainCloneContext indicates an expected call of PlainCloneContext.
func (mr *MockGitMockRecorder) PlainCloneContext(ctx, path, isBare, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlainCloneContext", reflect.TypeOf((*MockGit)(nil).PlainCloneContext), ctx, path, isBare, o)
}

// PlainOpen mocks base method.
func (m *MockGit) PlainOpen(path string) (git.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlainOpen", path)
	ret0, _ := ret[0].(git.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlainOpen indicates an expected call of PlainOpen.
func (mr *MockGitMockRecorder) PlainOpen(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlainOpen", reflect.TypeOf((*MockGit)(nil).PlainOpen), path)
}

// MockGitRepository is a mock of GitRepository interface.
type MockGitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryMockRecorder
}

// MockGitRepositoryMockRecorder is the mock recorder for MockGitRepository.
type MockGitRepositoryMockRecorder struct {
	mock *MockGitRepository
}

// NewMockGitRepository creates a new mock instance.
func NewMockGitRepository(ctrl *gomock.Controller) *MockGitRepository {
	mock := &MockGitRepository{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepository) EXPECT() *MockGitRepositoryMockRecorder {
	return m.recorder
}

// FetchContext mocks base method.
func (m *MockGitRepository) FetchContext(ctx context.Context, o *v5.FetchOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchContext", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchContext indicates an expected call of FetchContext.
func (mr *MockGitRepositoryMockRecorder) FetchContext(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchContext", reflect.TypeOf((*MockGitRepository)(nil).FetchContext), ctx, o)
}

// Worktree mocks base method.
func (m *MockGitRepository) Worktree() (git.GitRepositoryWorktree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Worktree")
	ret0, _ := ret[0].(git.GitRepositoryWorktree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Worktree indicates an expected call of Worktree.
func (mr *MockGitRepositoryMockRecorder) Worktree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Worktree", reflect.TypeOf((*MockGitRepository)(nil).Worktree))
}

// MockGitRepositoryWorktree is a mock of GitRepositoryWorktree interface.
type MockGitRepositoryWorktree struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryWorktreeMockRecorder
}

// MockGitRepositoryWorktreeMockRecorder is the mock recorder for MockGitRepositoryWorktree.
type MockGitRepositoryWorktreeMockRecorder struct {
	mock *MockGitRepositoryWorktree
}

// NewMockGitRepositoryWorktree creates a new mock instance.
func NewMockGitRepositoryWorktree(ctrl *gomock.Controller) *MockGitRepositoryWorktree {
	mock := &MockGitRepositoryWorktree{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryWorktreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepositoryWorktree) EXPECT() *MockGitRepositoryWorktreeMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockGitRepositoryWorktree) Checkout(opts *v5.CheckoutOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockGitRepositoryWorktreeMockRecorder) Checkout(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockGitRepositoryWorktree)(nil).Checkout), opts)
}

// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package reactorfakes

import (
	"sync"

	"github.com/gardener/docforge/pkg/reactor"
)

type FakeDownloadScheduler struct {
	ScheduleStub        func(*reactor.DownloadTask) error
	scheduleMutex       sync.RWMutex
	scheduleArgsForCall []struct {
		arg1 *reactor.DownloadTask
	}
	scheduleReturns struct {
		result1 error
	}
	scheduleReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDownloadScheduler) Schedule(arg1 *reactor.DownloadTask) error {
	fake.scheduleMutex.Lock()
	ret, specificReturn := fake.scheduleReturnsOnCall[len(fake.scheduleArgsForCall)]
	fake.scheduleArgsForCall = append(fake.scheduleArgsForCall, struct {
		arg1 *reactor.DownloadTask
	}{arg1})
	stub := fake.ScheduleStub
	fakeReturns := fake.scheduleReturns
	fake.recordInvocation("Schedule", []interface{}{arg1})
	fake.scheduleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDownloadScheduler) ScheduleCallCount() int {
	fake.scheduleMutex.RLock()
	defer fake.scheduleMutex.RUnlock()
	return len(fake.scheduleArgsForCall)
}

func (fake *FakeDownloadScheduler) ScheduleCalls(stub func(*reactor.DownloadTask) error) {
	fake.scheduleMutex.Lock()
	defer fake.scheduleMutex.Unlock()
	fake.ScheduleStub = stub
}

func (fake *FakeDownloadScheduler) ScheduleArgsForCall(i int) *reactor.DownloadTask {
	fake.scheduleMutex.RLock()
	defer fake.scheduleMutex.RUnlock()
	argsForCall := fake.scheduleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDownloadScheduler) ScheduleReturns(result1 error) {
	fake.scheduleMutex.Lock()
	defer fake.scheduleMutex.Unlock()
	fake.ScheduleStub = nil
	fake.scheduleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDownloadScheduler) ScheduleReturnsOnCall(i int, result1 error) {
	fake.scheduleMutex.Lock()
	defer fake.scheduleMutex.Unlock()
	fake.ScheduleStub = nil
	if fake.scheduleReturnsOnCall == nil {
		fake.scheduleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scheduleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDownloadScheduler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scheduleMutex.RLock()
	defer fake.scheduleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDownloadScheduler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reactor.DownloadScheduler = new(FakeDownloadScheduler)

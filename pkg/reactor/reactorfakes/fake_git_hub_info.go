// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package reactorfakes

import (
	"sync"

	"github.com/gardener/docforge/pkg/api"
	"github.com/gardener/docforge/pkg/reactor"
)

type FakeGitHubInfo struct {
	WriteGitHubInfoStub        func(*api.Node) bool
	writeGitHubInfoMutex       sync.RWMutex
	writeGitHubInfoArgsForCall []struct {
		arg1 *api.Node
	}
	writeGitHubInfoReturns struct {
		result1 bool
	}
	writeGitHubInfoReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitHubInfo) WriteGitHubInfo(arg1 *api.Node) bool {
	fake.writeGitHubInfoMutex.Lock()
	ret, specificReturn := fake.writeGitHubInfoReturnsOnCall[len(fake.writeGitHubInfoArgsForCall)]
	fake.writeGitHubInfoArgsForCall = append(fake.writeGitHubInfoArgsForCall, struct {
		arg1 *api.Node
	}{arg1})
	stub := fake.WriteGitHubInfoStub
	fakeReturns := fake.writeGitHubInfoReturns
	fake.recordInvocation("WriteGitHubInfo", []interface{}{arg1})
	fake.writeGitHubInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitHubInfo) WriteGitHubInfoCallCount() int {
	fake.writeGitHubInfoMutex.RLock()
	defer fake.writeGitHubInfoMutex.RUnlock()
	return len(fake.writeGitHubInfoArgsForCall)
}

func (fake *FakeGitHubInfo) WriteGitHubInfoCalls(stub func(*api.Node) bool) {
	fake.writeGitHubInfoMutex.Lock()
	defer fake.writeGitHubInfoMutex.Unlock()
	fake.WriteGitHubInfoStub = stub
}

func (fake *FakeGitHubInfo) WriteGitHubInfoArgsForCall(i int) *api.Node {
	fake.writeGitHubInfoMutex.RLock()
	defer fake.writeGitHubInfoMutex.RUnlock()
	argsForCall := fake.writeGitHubInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGitHubInfo) WriteGitHubInfoReturns(result1 bool) {
	fake.writeGitHubInfoMutex.Lock()
	defer fake.writeGitHubInfoMutex.Unlock()
	fake.WriteGitHubInfoStub = nil
	fake.writeGitHubInfoReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeGitHubInfo) WriteGitHubInfoReturnsOnCall(i int, result1 bool) {
	fake.writeGitHubInfoMutex.Lock()
	defer fake.writeGitHubInfoMutex.Unlock()
	fake.WriteGitHubInfoStub = nil
	if fake.writeGitHubInfoReturnsOnCall == nil {
		fake.writeGitHubInfoReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.writeGitHubInfoReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeGitHubInfo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeGitHubInfoMutex.RLock()
	defer fake.writeGitHubInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitHubInfo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reactor.GitHubInfo = new(FakeGitHubInfo)
